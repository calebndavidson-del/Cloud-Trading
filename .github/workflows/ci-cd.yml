# Enhanced Cloud Trading Bot CI/CD Workflow
# Comprehensive testing, coverage, and deployment automation

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
      run_e2e_tests:
        description: 'Run E2E tests'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Linting and Code Quality
  lint-and-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_Version9.txt
          pip install -r requirements-test.txt
          
      - name: Run Black (Code Formatting)
        run: black --check --diff .
        
      - name: Run isort (Import Sorting)
        run: isort --check-only --diff .
        
      - name: Run Flake8 (Linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Unit and Integration Testing
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_Version9.txt
          pip install -r requirements-test.txt
          
      - name: Run Unit Tests with Coverage
        env:
          USE_MOCK_DATA: 'true'
        run: |
          python -m pytest tests/unit/ \
            --cov=. \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --cov-report=term-missing \
            --junitxml=junit-unit.xml \
            -v
            
      - name: Run Integration Tests
        env:
          USE_MOCK_DATA: 'true'
        run: |
          python -m pytest tests/integration/ \
            --cov=. \
            --cov-append \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --junitxml=junit-integration.xml \
            -v
            
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-unit.xml,./coverage-integration.xml
          flags: unittests,integration
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit-*.xml
            htmlcov-*
            coverage-*.xml
          retention-days: 30

  # End-to-End Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.run_e2e_tests == 'true' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_Version9.txt
          pip install -r requirements-test.txt
          
      - name: Install Playwright
        run: |
          playwright install --with-deps chromium
          
      - name: Run E2E Tests
        env:
          USE_MOCK_DATA: 'true'
        run: |
          python -m pytest tests/e2e/ \
            --headed=false \
            --browser=chromium \
            --junitxml=junit-e2e.xml \
            -v
            
      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            junit-e2e.xml
            test-results/
          retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Bandit Security Linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json
          
      - name: Run Safety Check
        run: |
          pip install safety
          safety check --json --output safety-report.json
          
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Copilot Integration and Code Generation
  copilot-suggestions:
    name: Copilot Code Suggestions
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Analyze Code Changes
        run: |
          # Get changed files
          git diff --name-only origin/main..HEAD > changed_files.txt
          
          # Analyze for missing tests
          python scripts/analyze_coverage.py changed_files.txt > missing_tests.txt || true
          
      - name: Generate Test Suggestions
        run: |
          # This would integrate with GitHub Copilot API to suggest tests
          echo "Analyzing code for missing test coverage..." > copilot_suggestions.md
          echo "## Suggested Tests" >> copilot_suggestions.md
          
          if [ -s missing_tests.txt ]; then
            echo "Based on the changed files, consider adding tests for:" >> copilot_suggestions.md
            cat missing_tests.txt >> copilot_suggestions.md
          else
            echo "No obvious missing test coverage detected." >> copilot_suggestions.md
          fi
          
      - name: Comment on PR with Suggestions
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const suggestions = fs.readFileSync('copilot_suggestions.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: suggestions
            });

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_Version9.txt
          pip install -r requirements-test.txt
          pip install pytest-benchmark
          
      - name: Run Performance Tests
        env:
          USE_MOCK_DATA: 'true'
        run: |
          python -m pytest tests/integration/ \
            -m "slow" \
            --benchmark-json=benchmark-results.json \
            -v
            
      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results.json
          retention-days: 30

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_Version9.txt
          pip install build wheel
          
      - name: Package Lambda Functions
        run: |
          chmod +x scripts/package_lambda.sh
          ./scripts/package_lambda.sh
          
      - name: Build Python Package
        run: |
          python -m build
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            lambda-packages/
          retention-days: 30

  # Deployment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
          
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Deploy Infrastructure
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
          
      - name: Run Smoke Tests
        run: |
          python scripts/smoke_tests.py --environment ${{ github.event.inputs.environment || 'staging' }}

  # Coverage Reporting and Quality Gates
  coverage-report:
    name: Coverage Report & Quality Gates
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          
      - name: Generate Combined Coverage Report
        run: |
          pip install coverage
          coverage combine
          coverage report --fail-under=70
          coverage html -d htmlcov-combined
          
      - name: Upload Combined Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-combined
          path: htmlcov-combined/
          retention-days: 30
          
      - name: Quality Gate Check
        run: |
          # Check coverage threshold
          coverage report --fail-under=70
          
          # Check for critical security issues
          # This would parse the security reports
          echo "Checking quality gates..."
          
          # Check test pass rate
          python scripts/check_quality_gates.py