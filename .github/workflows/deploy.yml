name: Deploy Cloud Trading Bot to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: cloud-trading-bot
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Test Python backend
        run: |
          echo "Testing backend configuration..."
          python -c "
          import sys
          sys.path.append('.')
          from backend.config import get_config
          print('‚úì Backend config test passed')
          "
          echo "Testing API import..."
          python -c "
          import sys
          sys.path.append('.')
          from api import app
          print('‚úì API import test passed')
          "
          echo "‚úì Backend tests completed successfully"

      - name: Test Docker build
        run: |
          echo "Testing Docker build..."
          docker build -t test-image .
          echo "‚úì Docker build test passed"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Enable required APIs
        run: |
          gcloud services enable run.googleapis.com
          gcloud services enable containerregistry.googleapis.com
          gcloud services enable cloudbuild.googleapis.com

      - name: Configure Docker for Container Registry
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
          echo "‚úì Docker image built successfully"

      - name: Push Docker image
        run: |
          echo "Pushing Docker image to Container Registry..."
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
          echo "‚úì Docker image pushed successfully"

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --port 8080 \
            --timeout 300 \
            --set-env-vars "ENVIRONMENT=production,PYTHONPATH=/app"
          echo "‚úì Cloud Run deployment completed"

      - name: Get deployment details
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
          echo "üöÄ Deployment successful!"
          echo "üìä Dashboard URL: $SERVICE_URL"
          echo "üîç Health Check: $SERVICE_URL/health"
          echo "üì° API Status: $SERVICE_URL/api/system/status"
          
          # Test the deployment
          echo "Testing deployed service..."
          if curl -f -s "$SERVICE_URL/health" > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è  Health check failed - service might still be starting"
          fi
